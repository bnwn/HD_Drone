<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\output\HD_Drone.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\output\HD_Drone.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060183: Last Updated: Thu Sep 07 21:12:40 2017
<BR><P>
<H3>Maximum Stack Usage =        504 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; scheduler_run &rArr; fast_loop &rArr; update_flight_mode &rArr; althold_run &rArr; position_z_controller &rArr; pos_to_rate_z &rArr; rate_to_accel_z &rArr; accel_to_throttle &rArr; attitude_throttle_controller &rArr; get_throttle_boosted &rArr; cos &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[2]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">NMI_Handler</a><BR>
 <LI><a href="#[4]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">SVC_Handler</a><BR>
 <LI><a href="#[5]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">PendSV_Handler</a><BR>
 <LI><a href="#[1b]">Default_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1b]">Default_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1c]">ACMP_IRQHandler</a> from startup_pn020series.o(.text) referenced from startup_pn020series.o(RESET)
 <LI><a href="#[1e]">ADC_IRQHandler</a> from startup_pn020series.o(.text) referenced from startup_pn020series.o(RESET)
 <LI><a href="#[7]">BOD_IRQHandler</a> from startup_pn020series.o(.text) referenced from startup_pn020series.o(RESET)
 <LI><a href="#[1b]">Default_Handler</a> from startup_pn020series.o(.text) referenced 9 times from startup_pn020series.o(RESET)
 <LI><a href="#[9]">EINT0_IRQHandler</a> from startup_pn020series.o(.text) referenced from startup_pn020series.o(RESET)
 <LI><a href="#[a]">EINT1_IRQHandler</a> from startup_pn020series.o(.text) referenced from startup_pn020series.o(RESET)
 <LI><a href="#[12]">EINT2_IRQHandler</a> from startup_pn020series.o(.text) referenced from startup_pn020series.o(RESET)
 <LI><a href="#[e]">FB_IRQHandler</a> from startup_pn020series.o(.text) referenced from startup_pn020series.o(RESET)
 <LI><a href="#[b]">GPIO01_IRQHandler</a> from startup_pn020series.o(.text) referenced from startup_pn020series.o(RESET)
 <LI><a href="#[c]">GPIO234_IRQHandler</a> from startup_pn020series.o(.text) referenced from startup_pn020series.o(RESET)
 <LI><a href="#[17]">GPIO5_IRQHandler</a> from startup_pn020series.o(.text) referenced from startup_pn020series.o(RESET)
 <LI><a href="#[18]">HIRC_IRQHandler</a> from startup_pn020series.o(.text) referenced from startup_pn020series.o(RESET)
 <LI><a href="#[3]">HardFault_Handler</a> from retarget.o(.emb_text) referenced from startup_pn020series.o(RESET)
 <LI><a href="#[20]">Hard_Fault_Handler</a> from retarget.o(.text) referenced from retarget.o(.emb_text)
 <LI><a href="#[19]">I2C0_IRQHandler</a> from startup_pn020series.o(.text) referenced from startup_pn020series.o(RESET)
 <LI><a href="#[1a]">I2C1_IRQHandler</a> from startup_pn020series.o(.text) referenced from startup_pn020series.o(RESET)
 <LI><a href="#[2]">NMI_Handler</a> from startup_pn020series.o(.text) referenced from startup_pn020series.o(RESET)
 <LI><a href="#[1d]">PDWU_IRQHandler</a> from startup_pn020series.o(.text) referenced from startup_pn020series.o(RESET)
 <LI><a href="#[d]">PWM_IRQHandler</a> from startup_pn020series.o(.text) referenced from startup_pn020series.o(RESET)
 <LI><a href="#[5]">PendSV_Handler</a> from startup_pn020series.o(.text) referenced from startup_pn020series.o(RESET)
 <LI><a href="#[23]">Reset_Handler</a> from startup_pn020series.o(.text) referenced from startup_pn020series.o(RESET)
 <LI><a href="#[15]">SPI0_IRQHandler</a> from startup_pn020series.o(.text) referenced from startup_pn020series.o(RESET)
 <LI><a href="#[16]">SPI1_IRQHandler</a> from startup_pn020series.o(.text) referenced from startup_pn020series.o(RESET)
 <LI><a href="#[4]">SVC_Handler</a> from startup_pn020series.o(.text) referenced from startup_pn020series.o(RESET)
 <LI><a href="#[6]">SysTick_Handler</a> from common.o(.text) referenced from startup_pn020series.o(RESET)
 <LI><a href="#[f]">TMR0_IRQHandler</a> from startup_pn020series.o(.text) referenced from startup_pn020series.o(RESET)
 <LI><a href="#[10]">TMR1_IRQHandler</a> from scheduler.o(.text) referenced from startup_pn020series.o(RESET)
 <LI><a href="#[11]">TMR2_IRQHandler</a> from startup_pn020series.o(.text) referenced from startup_pn020series.o(RESET)
 <LI><a href="#[13]">UART0_IRQHandler</a> from startup_pn020series.o(.text) referenced from startup_pn020series.o(RESET)
 <LI><a href="#[14]">UART1_IRQHandler</a> from startup_pn020series.o(.text) referenced from startup_pn020series.o(RESET)
 <LI><a href="#[8]">WDT_IRQHandler</a> from startup_pn020series.o(.text) referenced from startup_pn020series.o(RESET)
 <LI><a href="#[21]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_pn020series.o(.text)
 <LI><a href="#[22]">fputc</a> from retarget.o(.text) referenced from printf5.o(i.__0printf$5)
 <LI><a href="#[1f]">main</a> from main.o(.text) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[21]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_pn020series.o(.text)
</UL>
<P><STRONG><a name="[11f]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[27]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[108]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[120]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[121]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[122]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[123]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[124]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[3]"></a>HardFault_Handler</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, retarget.o(.emb_text))
<BR>[Address Reference Count : 1]<UL><LI> startup_pn020series.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>configure_fifo</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, bmi160.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = configure_fifo &rArr; TIMER_Delay &rArr; __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Delay
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi160_init
</UL>

<P><STRONG><a name="[2c]"></a>configure_gyro</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, bmi160.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = configure_gyro &rArr; TIMER_Delay &rArr; __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Delay
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi160_init
</UL>

<P><STRONG><a name="[2d]"></a>configure_accel</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, bmi160.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = configure_accel &rArr; TIMER_Delay &rArr; __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Delay
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi160_init
</UL>

<P><STRONG><a name="[2e]"></a>bmi160_init</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, bmi160.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = bmi160_init &rArr; I2C_ReadByte &rArr; TIMER_Delay &rArr; __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Delay
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WriteByte
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadByte
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configure_accel
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configure_gyro
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configure_fifo
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peripheral_init
</UL>

<P><STRONG><a name="[30]"></a>read_fifo</STRONG> (Thumb, 372 bytes, Stack size 328 bytes, bmi160.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = read_fifo &rArr; I2C_WriteByte &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WriteByte
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SequentialRead
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi160_read_raw
</UL>

<P><STRONG><a name="[34]"></a>bmi160_read_raw</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bmi160.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = bmi160_read_raw &rArr; read_fifo &rArr; I2C_WriteByte &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_fifo
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro_offset
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accel_offset
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inertial_sensor_read
</UL>

<P><STRONG><a name="[38]"></a>calculate</STRONG> (Thumb, 704 bytes, Stack size 88 bytes, fbm320.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = calculate
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fbm320_timer_procedure
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fbm320_init
</UL>

<P><STRONG><a name="[35]"></a>fbm320_read_long_data</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, fbm320.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = fbm320_read_long_data &rArr; I2C_SequentialRead
</UL>
<BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SequentialRead
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fbm320_timer_procedure
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fbm320_init
</UL>

<P><STRONG><a name="[36]"></a>coefficient</STRONG> (Thumb, 404 bytes, Stack size 40 bytes, fbm320.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = coefficient &rArr; I2C_ReadByte &rArr; TIMER_Delay &rArr; __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadByte
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fbm320_init
</UL>

<P><STRONG><a name="[37]"></a>fbm320_init</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, fbm320.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = fbm320_init &rArr; coefficient &rArr; I2C_ReadByte &rArr; TIMER_Delay &rArr; __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coefficient
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fbm320_read_long_data
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Delay
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WriteByte
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadByte
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peripheral_init
</UL>

<P><STRONG><a name="[3a]"></a>abs_altitude</STRONG> (Thumb, 304 bytes, Stack size 12 bytes, fbm320.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = abs_altitude
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fbm320_timer_procedure
</UL>

<P><STRONG><a name="[39]"></a>fbm320_timer_procedure</STRONG> (Thumb, 328 bytes, Stack size 24 bytes, fbm320.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = fbm320_timer_procedure &rArr; calculate
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_milli
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Moving_Average
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abs_altitude
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fbm320_read_long_data
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sched_80Hzloop
</UL>

<P><STRONG><a name="[43]"></a>motor_init</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, motor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = motor_init &rArr; PWM_ConfigOutputChannel &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Start
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_EnableOutput
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_ConfigOutputChannel
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peripheral_init
</UL>

<P><STRONG><a name="[48]"></a>motor_update</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, motor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = motor_update &rArr; __aeabi_ui2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constrain_float
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motors_output
</UL>

<P><STRONG><a name="[ad]"></a>motor_stop</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, motor.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motors_output
</UL>

<P><STRONG><a name="[4c]"></a>system_init</STRONG> (Thumb, 212 bytes, Stack size 24 bytes, common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = system_init &rArr; SystemCoreClockUpdate &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetModuleClock
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_InitHIRC
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnableModuleClock
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[51]"></a>param_load</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = param_load &rArr; set_pid_param &rArr; set_pid_filt_hz &rArr; fmax &rArr; __ARM_dcmp4
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_pid_param
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peripheral_init
</UL>

<P><STRONG><a name="[53]"></a>peripheral_init</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = peripheral_init &rArr; gyro_offset &rArr; bmi160_read_raw &rArr; read_fifo &rArr; I2C_WriteByte &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_console_init
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scheduler_init
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rc_channel_init
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inertial_sensor_init
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inertial_nav_init
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro_offset
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accel_offset
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;param_load
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_init
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fbm320_init
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi160_init
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5d]"></a>fc_status_reset</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, common.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9e]"></a>set_land_complete</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, common.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stabilize_run
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;althold_run
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acro_run
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_motor_armed
</UL>

<P><STRONG><a name="[ef]"></a>set_radio_lost</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, common.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rc_channel_read
</UL>

<P><STRONG><a name="[bb]"></a>systick_config</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = systick_config
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scheduler_init
</UL>

<P><STRONG><a name="[6]"></a>SysTick_Handler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_pn020series.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>sys_micro</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = sys_micro &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stabilize_run
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;althold_run
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;position_z_update
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHRS_GetQ
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_loop
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rate_to_accel_z
</UL>

<P><STRONG><a name="[42]"></a>sys_milli</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, common.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;position_z_controller
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_active_z
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;takeoff_timer_start
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;takeoff_get_climb_rates
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fbm320_timer_procedure
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rc_channel_read
</UL>

<P><STRONG><a name="[1f]"></a>main</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = main &rArr; scheduler_run &rArr; fast_loop &rArr; update_flight_mode &rArr; althold_run &rArr; position_z_controller &rArr; pos_to_rate_z &rArr; rate_to_accel_z &rArr; accel_to_throttle &rArr; attitude_throttle_controller &rArr; get_throttle_boosted &rArr; cos &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scheduler_run
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fc_status_reset
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peripheral_init
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[4e]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, system_pn020series.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SystemCoreClockUpdate &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_init
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetHCLKFreq
</UL>

<P><STRONG><a name="[23]"></a>Reset_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_pn020series.o(.text))

<P><STRONG><a name="[2]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_pn020series.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_pn020series.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_pn020series.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_pn020series.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_pn020series.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_pn020series.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>ACMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_pn020series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_pn020series.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_pn020series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_pn020series.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>BOD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_pn020series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_pn020series.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>EINT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_pn020series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_pn020series.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>EINT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_pn020series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_pn020series.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EINT2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_pn020series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_pn020series.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>FB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_pn020series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_pn020series.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>GPIO01_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_pn020series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_pn020series.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>GPIO234_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_pn020series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_pn020series.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>GPIO5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_pn020series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_pn020series.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>HIRC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_pn020series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_pn020series.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>I2C0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_pn020series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_pn020series.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_pn020series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_pn020series.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>PDWU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_pn020series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_pn020series.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>PWM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_pn020series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_pn020series.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>SPI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_pn020series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_pn020series.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_pn020series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_pn020series.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>TMR0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_pn020series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_pn020series.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>TMR2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_pn020series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_pn020series.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>UART0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_pn020series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_pn020series.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>UART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_pn020series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_pn020series.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>WDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_pn020series.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_pn020series.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>LPF2pSetCutoffFreq</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, algorithm_filter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = LPF2pSetCutoffFreq &rArr; tanf &rArr; __mathlib_rredf2 &rArr; __aeabi_frsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tanf
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosf
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inertial_sensor_init
</UL>

<P><STRONG><a name="[64]"></a>LPF2pApply</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, algorithm_filter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = LPF2pApply &rArr; __aeabi_frsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inertial_sensor_read
</UL>

<P><STRONG><a name="[65]"></a>LPF_1st</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, algorithm_filter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = LPF_1st &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_logic
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rate_to_accel_z
</UL>

<P><STRONG><a name="[3d]"></a>Moving_Average</STRONG> (Thumb, 154 bytes, Stack size 48 bytes, algorithm_filter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = Moving_Average &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fbm320_timer_procedure
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_home_pos
</UL>

<P><STRONG><a name="[68]"></a>Q_rsqrt</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, algorithm_math.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Q_rsqrt &rArr; __aeabi_frsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_desired_leans_angles
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion_Normalize
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHRS_GetQ
</UL>

<P><STRONG><a name="[ce]"></a>VariableParameter</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, algorithm_math.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHRS_GetQ
</UL>

<P><STRONG><a name="[69]"></a>Rad</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, algorithm_math.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Rad &rArr; __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;axis_target_pid_cal
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHRS_GetQ
</UL>

<P><STRONG><a name="[6c]"></a>Degree</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, algorithm_math.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Degree &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHRS_Update
</UL>

<P><STRONG><a name="[49]"></a>constrain_float</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, algorithm_math.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = constrain_float
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_alt_target_from_climb_rate_ff
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_desired_throttle_expo
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_desired_climb_rate
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;althold_run
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_throttle_boosted
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_update
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;norm_input_dz
</UL>

<P><STRONG><a name="[6e]"></a>set_pid_filt_hz</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, algorithm_pid.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = set_pid_filt_hz &rArr; fmax &rArr; __ARM_dcmp4
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmax
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_pid_param
</UL>

<P><STRONG><a name="[52]"></a>set_pid_param</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, algorithm_pid.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = set_pid_param &rArr; set_pid_filt_hz &rArr; fmax &rArr; __ARM_dcmp4
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_pid_filt_hz
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;param_load
</UL>

<P><STRONG><a name="[f2]"></a>set_pid_param_i</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, algorithm_pid.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_event_trigger
</UL>

<P><STRONG><a name="[f3]"></a>set_pid_param_d</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, algorithm_pid.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_event_trigger
</UL>

<P><STRONG><a name="[70]"></a>get_pd_output</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, algorithm_pid.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = get_pd_output &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_pid_input
</UL>

<P><STRONG><a name="[71]"></a>get_filt_alpha</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, algorithm_pid.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = get_filt_alpha &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_pid_input
</UL>

<P><STRONG><a name="[72]"></a>set_pid_input</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, algorithm_pid.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = set_pid_input &rArr; get_filt_alpha &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_filt_alpha
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_pd_output
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;axis_target_pid_cal
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accel_to_throttle
</UL>

<P><STRONG><a name="[73]"></a>get_i_output</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, algorithm_pid.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = get_i_output &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;axis_target_pid_cal
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accel_to_throttle
</UL>

<P><STRONG><a name="[88]"></a>reset_pid_I</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, algorithm_pid.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_rate_controller
</UL>

<P><STRONG><a name="[89]"></a>reset_pid_D</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, algorithm_pid.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_rate_controller
</UL>

<P><STRONG><a name="[7c]"></a>get_integrator</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, algorithm_pid.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;axis_target_pid_cal
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accel_to_throttle
</UL>

<P><STRONG><a name="[74]"></a>Quaternion_vectorGravity</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, algorithm_quaternion.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = Quaternion_vectorGravity &rArr; __aeabi_frsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHRS_GetQ
</UL>

<P><STRONG><a name="[75]"></a>Quaternion_ToMatrix</STRONG> (Thumb, 374 bytes, Stack size 24 bytes, algorithm_quaternion.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = Quaternion_ToMatrix &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion_ToAngE
</UL>

<P><STRONG><a name="[76]"></a>Quaternion_ToAngE</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, algorithm_quaternion.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = Quaternion_ToAngE &rArr; atan2f &rArr; __mathlib_flt_infnan2 &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion_ToMatrix
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2f
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asinf
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHRS_Update
</UL>

<P><STRONG><a name="[79]"></a>Quaternion_Normalize</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, algorithm_quaternion.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = Quaternion_Normalize &rArr; Q_rsqrt &rArr; __aeabi_frsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_rsqrt
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHRS_GetQ
</UL>

<P><STRONG><a name="[7a]"></a>Quaternion_RungeKutta</STRONG> (Thumb, 240 bytes, Stack size 48 bytes, algorithm_quaternion.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = Quaternion_RungeKutta &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHRS_GetQ
</UL>

<P><STRONG><a name="[7b]"></a>axis_target_pid_cal</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, attitude_control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = axis_target_pid_cal &rArr; set_pid_input &rArr; get_filt_alpha &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_integrator
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_i_output
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_pid_input
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rad
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attitude_angle_euler_controller
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attitude_angle_rate_controller
</UL>

<P><STRONG><a name="[7d]"></a>attitude_angle_rate_controller</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, attitude_control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = attitude_angle_rate_controller &rArr; axis_target_pid_cal &rArr; set_pid_input &rArr; get_filt_alpha &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_motor_yaw
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_motor_roll
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_motor_pitch
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_inertial_vel
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;axis_target_pid_cal
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_loop
</UL>

<P><STRONG><a name="[82]"></a>attitude_angle_euler_controller</STRONG> (Thumb, 84 bytes, Stack size 40 bytes, attitude_control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = attitude_angle_euler_controller &rArr; axis_target_pid_cal &rArr; set_pid_input &rArr; get_filt_alpha &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;axis_target_pid_cal
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stabilize_run
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;althold_run
</UL>

<P><STRONG><a name="[83]"></a>get_throttle_boosted</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, attitude_control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = get_throttle_boosted &rArr; cos &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constrain_float
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attitude_throttle_controller
</UL>

<P><STRONG><a name="[85]"></a>attitude_throttle_controller</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, attitude_control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = attitude_throttle_controller &rArr; get_throttle_boosted &rArr; cos &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_motor_throttle
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_throttle_boosted
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stabilize_run
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acro_run
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accel_to_throttle
</UL>

<P><STRONG><a name="[87]"></a>reset_rate_controller</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, attitude_control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = reset_rate_controller
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_pid_D
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_pid_I
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;althold_run
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acro_init
</UL>

<P><STRONG><a name="[97]"></a>exit_mode</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, flight_mode_control.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_flight_mode
</UL>

<P><STRONG><a name="[8a]"></a>acro_init</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, flight_mode_control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = acro_init &rArr; reset_rate_controller
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_throttle_is_safe
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_rate_controller
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_flight_mode
</UL>

<P><STRONG><a name="[93]"></a>takeoff_stop</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, flight_mode_control.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;takeoff_get_climb_rates
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;althold_init
</UL>

<P><STRONG><a name="[8c]"></a>althold_init</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, flight_mode_control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = althold_init &rArr; set_speed_z &rArr; calc_leash_length_z &rArr; calc_leash_length &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_speed_z
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_desired_vel_z
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_alt_target_to_current_alt
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_accel_z
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_active_z
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_inav_velocity
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_throttle_is_safe
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;takeoff_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_flight_mode
</UL>

<P><STRONG><a name="[94]"></a>stabilize_init</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, flight_mode_control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = stabilize_init
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_throttle_is_safe
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_flight_mode
</UL>

<P><STRONG><a name="[95]"></a>set_flight_mode</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, flight_mode_control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = set_flight_mode &rArr; althold_init &rArr; set_speed_z &rArr; calc_leash_length_z &rArr; calc_leash_length &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stabilize_init
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;althold_init
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acro_init
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_event_trigger
</UL>

<P><STRONG><a name="[98]"></a>update_simple_mode</STRONG> (Thumb, 204 bytes, Stack size 24 bytes, flight_mode_control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = update_simple_mode &rArr; sinf &rArr; __mathlib_rredf2 &rArr; __aeabi_frsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sinf
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosf
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;althold_run
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acro_run
</UL>

<P><STRONG><a name="[9a]"></a>acro_run</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, flight_mode_control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = acro_run &rArr; attitude_throttle_controller &rArr; get_throttle_boosted &rArr; cos &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_motor_state
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_desired_throttle_expo
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_desired_leans_angles
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_simple_mode
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attitude_throttle_controller
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_land_complete
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_flight_mode
</UL>

<P><STRONG><a name="[a3]"></a>get_smoothing_gain</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, flight_mode_control.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stabilize_run
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;althold_run
</UL>

<P><STRONG><a name="[9f]"></a>takeoff_get_climb_rates</STRONG> (Thumb, 288 bytes, Stack size 40 bytes, flight_mode_control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = takeoff_get_climb_rates &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;takeoff_stop
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_milli
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;althold_run
</UL>

<P><STRONG><a name="[a0]"></a>takeoff_timer_start</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, flight_mode_control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = takeoff_timer_start
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_milli
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;althold_run
</UL>

<P><STRONG><a name="[a1]"></a>althold_run</STRONG> (Thumb, 444 bytes, Stack size 32 bytes, flight_mode_control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = althold_run &rArr; position_z_controller &rArr; pos_to_rate_z &rArr; rate_to_accel_z &rArr; accel_to_throttle &rArr; attitude_throttle_controller &rArr; get_throttle_boosted &rArr; cos &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_motor_state
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_alt_target_from_climb_rate_ff
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;relax_alt_controller
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;position_z_controller
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poscontrol_init_takeoff
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_desired_leans_angles
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_desired_climb_rate
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_takeoff_climb_rate
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;takeoff_timer_start
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;takeoff_get_climb_rates
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_smoothing_gain
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_simple_mode
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_rate_controller
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attitude_angle_euler_controller
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_micro
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_land_complete
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constrain_float
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_flight_mode
</UL>

<P><STRONG><a name="[a9]"></a>stabilize_run</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, flight_mode_control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = stabilize_run &rArr; attitude_throttle_controller &rArr; get_throttle_boosted &rArr; cos &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_motor_state
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_desired_throttle_expo
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_desired_leans_angles
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_smoothing_gain
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attitude_throttle_controller
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attitude_angle_euler_controller
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_micro
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_land_complete
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_flight_mode
</UL>

<P><STRONG><a name="[aa]"></a>update_flight_mode</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, flight_mode_control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = update_flight_mode &rArr; althold_run &rArr; position_z_controller &rArr; pos_to_rate_z &rArr; rate_to_accel_z &rArr; accel_to_throttle &rArr; attitude_throttle_controller &rArr; get_throttle_boosted &rArr; cos &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stabilize_run
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;althold_run
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acro_run
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_loop
</UL>

<P><STRONG><a name="[ab]"></a>motor_logic</STRONG> (Thumb, 186 bytes, Stack size 32 bytes, motor_control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = motor_logic &rArr; LPF_1st &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPF_1st
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motors_output
</UL>

<P><STRONG><a name="[ac]"></a>motors_output</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, motor_control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = motors_output &rArr; motor_logic &rArr; LPF_1st &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_logic
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_stop
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_update
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_loop
</UL>

<P><STRONG><a name="[7f]"></a>set_motor_roll</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, motor_control.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attitude_angle_rate_controller
</UL>

<P><STRONG><a name="[80]"></a>set_motor_pitch</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, motor_control.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attitude_angle_rate_controller
</UL>

<P><STRONG><a name="[81]"></a>set_motor_yaw</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, motor_control.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attitude_angle_rate_controller
</UL>

<P><STRONG><a name="[86]"></a>set_motor_throttle</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, motor_control.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attitude_throttle_controller
</UL>

<P><STRONG><a name="[9b]"></a>set_motor_state</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, motor_control.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stabilize_run
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;althold_run
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acro_run
</UL>

<P><STRONG><a name="[af]"></a>get_throttle_hover</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, motor_control.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;relax_alt_controller
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poscontrol_init_takeoff
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accel_to_throttle
</UL>

<P><STRONG><a name="[a6]"></a>poscontrol_init_takeoff</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, position_control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = poscontrol_init_takeoff &rArr; norm_input_dz &rArr; __aeabi_i2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_throttle_hover
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;norm_input_dz
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_inav_alt
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;althold_run
</UL>

<P><STRONG><a name="[b1]"></a>accel_to_throttle</STRONG> (Thumb, 200 bytes, Stack size 56 bytes, position_control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = accel_to_throttle &rArr; attitude_throttle_controller &rArr; get_throttle_boosted &rArr; cos &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_throttle_hover
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attitude_throttle_controller
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_integrator
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_i_output
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_pid_input
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_inav_accel
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rate_to_accel_z
</UL>

<P><STRONG><a name="[b3]"></a>rate_to_accel_z</STRONG> (Thumb, 200 bytes, Stack size 32 bytes, position_control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = rate_to_accel_z &rArr; accel_to_throttle &rArr; attitude_throttle_controller &rArr; get_throttle_boosted &rArr; cos &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_inav_velocity
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPF_1st
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_micro
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accel_to_throttle
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pos_to_rate_z
</UL>

<P><STRONG><a name="[b4]"></a>sqrt_controller</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, position_control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = sqrt_controller &rArr; __aeabi_frsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrtf
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pos_to_rate_z
</UL>

<P><STRONG><a name="[b6]"></a>pos_to_rate_z</STRONG> (Thumb, 214 bytes, Stack size 32 bytes, position_control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = pos_to_rate_z &rArr; rate_to_accel_z &rArr; accel_to_throttle &rArr; attitude_throttle_controller &rArr; get_throttle_boosted &rArr; cos &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_inav_alt
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt_controller
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rate_to_accel_z
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;position_z_controller
</UL>

<P><STRONG><a name="[b7]"></a>calc_leash_length</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, position_control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = calc_leash_length &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_leash_length_z
</UL>

<P><STRONG><a name="[b8]"></a>calc_leash_length_z</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, position_control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = calc_leash_length_z &rArr; calc_leash_length &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_leash_length
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_speed_z
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_accel_z
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;position_z_controller
</UL>

<P><STRONG><a name="[a5]"></a>position_z_controller</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, position_control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = position_z_controller &rArr; pos_to_rate_z &rArr; rate_to_accel_z &rArr; accel_to_throttle &rArr; attitude_throttle_controller &rArr; get_throttle_boosted &rArr; cos &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_milli
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_leash_length_z
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pos_to_rate_z
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;althold_run
</UL>

<P><STRONG><a name="[a8]"></a>add_takeoff_climb_rate</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, position_control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = add_takeoff_climb_rate &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;althold_run
</UL>

<P><STRONG><a name="[a7]"></a>set_alt_target_from_climb_rate_ff</STRONG> (Thumb, 360 bytes, Stack size 48 bytes, position_control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = set_alt_target_from_climb_rate_ff &rArr; sqrt &rArr; _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constrain_float
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;althold_run
</UL>

<P><STRONG><a name="[a4]"></a>relax_alt_controller</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, position_control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = relax_alt_controller &rArr; get_inav_velocity &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_throttle_hover
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_inav_velocity
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_inav_alt
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_inav_accel
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;althold_run
</UL>

<P><STRONG><a name="[8d]"></a>set_speed_z</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, position_control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = set_speed_z &rArr; calc_leash_length_z &rArr; calc_leash_length &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_leash_length_z
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;althold_init
</UL>

<P><STRONG><a name="[8e]"></a>set_accel_z</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, position_control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = set_accel_z &rArr; calc_leash_length_z &rArr; calc_leash_length &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_leash_length_z
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;althold_init
</UL>

<P><STRONG><a name="[8f]"></a>is_active_z</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, position_control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = is_active_z
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_milli
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;althold_init
</UL>

<P><STRONG><a name="[90]"></a>set_alt_target_to_current_alt</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, position_control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = set_alt_target_to_current_alt &rArr; get_inav_alt &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_inav_alt
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;althold_init
</UL>

<P><STRONG><a name="[92]"></a>set_desired_vel_z</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, position_control.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;althold_init
</UL>

<P><STRONG><a name="[56]"></a>scheduler_init</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, scheduler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = scheduler_init &rArr; TIMER_Open &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_config
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Open
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peripheral_init
</UL>

<P><STRONG><a name="[bd]"></a>time_slice</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, scheduler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = time_slice
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR1_IRQHandler
</UL>

<P><STRONG><a name="[10]"></a>TMR1_IRQHandler</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, scheduler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = TMR1_IRQHandler &rArr; time_slice
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_slice
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_pn020series.o(RESET)
</UL>
<P><STRONG><a name="[c9]"></a>sched_1Hzloop</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, scheduler.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_priority_loop
</UL>

<P><STRONG><a name="[be]"></a>sched_10Hzloop</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, scheduler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = sched_10Hzloop &rArr; check_motor_armed
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_motor_armed
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_priority_loop
</UL>

<P><STRONG><a name="[c0]"></a>sched_20Hzloop</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, scheduler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = sched_20Hzloop &rArr; switch_handle &rArr; switch_event_trigger &rArr; set_flight_mode &rArr; althold_init &rArr; set_speed_z &rArr; calc_leash_length_z &rArr; calc_leash_length &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_home_pos
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_priority_loop
</UL>

<P><STRONG><a name="[c3]"></a>sched_50Hzloop</STRONG> (Thumb, 1212 bytes, Stack size 112 bytes, scheduler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = sched_50Hzloop &rArr; inertial_nav_update &rArr; position_z_update &rArr; inertial_filter_predict &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_inav_velocity
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_inertial_vel
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rc_channel_read
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inertial_nav_update
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_inav_alt
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_inav_accel
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_priority_loop
</UL>

<P><STRONG><a name="[c7]"></a>sched_80Hzloop</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, scheduler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = sched_80Hzloop &rArr; fbm320_timer_procedure &rArr; calculate
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fbm320_timer_procedure
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_priority_loop
</UL>

<P><STRONG><a name="[c8]"></a>low_priority_loop</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, scheduler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = low_priority_loop &rArr; sched_50Hzloop &rArr; inertial_nav_update &rArr; position_z_update &rArr; inertial_filter_predict &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sched_80Hzloop
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sched_50Hzloop
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sched_20Hzloop
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sched_10Hzloop
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sched_1Hzloop
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scheduler_run
</UL>

<P><STRONG><a name="[ca]"></a>fast_loop</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, scheduler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = fast_loop &rArr; update_flight_mode &rArr; althold_run &rArr; position_z_controller &rArr; pos_to_rate_z &rArr; rate_to_accel_z &rArr; accel_to_throttle &rArr; attitude_throttle_controller &rArr; get_throttle_boosted &rArr; cos &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motors_output
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_flight_mode
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attitude_angle_rate_controller
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_micro
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inertial_sensor_read
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHRS_Update
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scheduler_run
</UL>

<P><STRONG><a name="[5e]"></a>scheduler_run</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, scheduler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = scheduler_run &rArr; fast_loop &rArr; update_flight_mode &rArr; althold_run &rArr; position_z_controller &rArr; pos_to_rate_z &rArr; rate_to_accel_z &rArr; accel_to_throttle &rArr; attitude_throttle_controller &rArr; get_throttle_boosted &rArr; cos &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_loop
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_priority_loop
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[cd]"></a>AHRS_GetQ</STRONG> (Thumb, 424 bytes, Stack size 64 bytes, ahrs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = AHRS_GetQ &rArr; Quaternion_RungeKutta &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion_RungeKutta
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion_Normalize
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion_vectorGravity
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rad
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VariableParameter
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_rsqrt
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_micro
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHRS_Update
</UL>

<P><STRONG><a name="[cc]"></a>AHRS_Update</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, ahrs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = AHRS_Update &rArr; AHRS_GetQ &rArr; Quaternion_RungeKutta &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion_ToAngE
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Degree
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHRS_GetQ
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_loop
</UL>

<P><STRONG><a name="[5a]"></a>inertial_sensor_init</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, inertial_sensor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = inertial_sensor_init &rArr; LPF2pSetCutoffFreq &rArr; tanf &rArr; __mathlib_rredf2 &rArr; __aeabi_frsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPF2pSetCutoffFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peripheral_init
</UL>

<P><STRONG><a name="[cb]"></a>inertial_sensor_read</STRONG> (Thumb, 234 bytes, Stack size 16 bytes, inertial_sensor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = inertial_sensor_read &rArr; bmi160_read_raw &rArr; read_fifo &rArr; I2C_WriteByte &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPF2pApply
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi160_read_raw
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_loop
</UL>

<P><STRONG><a name="[cf]"></a>gyro_caloffest</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, inertial_sensor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = gyro_caloffest &rArr; __aeabi_ui2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro_offset
</UL>

<P><STRONG><a name="[58]"></a>gyro_offset</STRONG> (Thumb, 270 bytes, Stack size 56 bytes, inertial_sensor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = gyro_offset &rArr; bmi160_read_raw &rArr; read_fifo &rArr; I2C_WriteByte &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Delay
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi160_read_raw
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro_caloffest
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peripheral_init
</UL>

<P><STRONG><a name="[59]"></a>accel_offset</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, inertial_sensor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = accel_offset &rArr; bmi160_read_raw &rArr; read_fifo &rArr; I2C_WriteByte &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Delay
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi160_read_raw
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peripheral_init
</UL>

<P><STRONG><a name="[7e]"></a>get_inertial_vel</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, inertial_sensor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = get_inertial_vel
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attitude_angle_rate_controller
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sched_50Hzloop
</UL>

<P><STRONG><a name="[5b]"></a>inertial_nav_init</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, inertial_nav.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peripheral_init
</UL>

<P><STRONG><a name="[d5]"></a>position_z_update</STRONG> (Thumb, 546 bytes, Stack size 64 bytes, inertial_nav.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = position_z_update &rArr; inertial_filter_predict &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_micro
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inertial_filter_predict
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inertial_filter_correct
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inertial_nav_update
</UL>

<P><STRONG><a name="[c5]"></a>inertial_nav_update</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, inertial_nav.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = inertial_nav_update &rArr; position_z_update &rArr; inertial_filter_predict &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;position_z_update
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sched_50Hzloop
</UL>

<P><STRONG><a name="[c1]"></a>update_home_pos</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, inertial_nav.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = update_home_pos &rArr; Moving_Average &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Moving_Average
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sched_20Hzloop
</UL>

<P><STRONG><a name="[ae]"></a>get_inav_alt</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, inertial_nav.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = get_inav_alt &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_alt_target_to_current_alt
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;relax_alt_controller
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poscontrol_init_takeoff
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sched_50Hzloop
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pos_to_rate_z
</UL>

<P><STRONG><a name="[91]"></a>get_inav_velocity</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, inertial_nav.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = get_inav_velocity &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;relax_alt_controller
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;althold_init
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sched_50Hzloop
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rate_to_accel_z
</UL>

<P><STRONG><a name="[b2]"></a>get_inav_accel</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, inertial_nav.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = get_inav_accel &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;relax_alt_controller
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sched_50Hzloop
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accel_to_throttle
</UL>

<P><STRONG><a name="[55]"></a>I2C_Init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, bsp_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = I2C_Init &rArr; I2C_Open &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Open
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peripheral_init
</UL>

<P><STRONG><a name="[2a]"></a>I2C_WriteByte</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, bsp_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = I2C_WriteByte &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SysTickDelay
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fbm320_timer_procedure
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fbm320_init
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_fifo
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi160_init
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configure_accel
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configure_gyro
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configure_fifo
</UL>

<P><STRONG><a name="[2f]"></a>I2C_ReadByte</STRONG> (Thumb, 224 bytes, Stack size 32 bytes, bsp_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = I2C_ReadByte &rArr; TIMER_Delay &rArr; __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Delay
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SysTickDelay
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fbm320_init
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;coefficient
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi160_init
</UL>

<P><STRONG><a name="[31]"></a>I2C_SequentialRead</STRONG> (Thumb, 226 bytes, Stack size 40 bytes, bsp_i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = I2C_SequentialRead
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SysTickDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fbm320_read_long_data
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_fifo
</UL>

<P><STRONG><a name="[54]"></a>uart_console_init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, uart_console.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = uart_console_init &rArr; UART_Open &rArr; CLK_GetHCLKFreq &rArr; SystemCoreClockUpdate &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Open
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peripheral_init
</UL>

<P><STRONG><a name="[da]"></a>SPI1_Init</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, bsp_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SPI1_Init &rArr; TIMER_Delay &rArr; __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Delay
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Open
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rc_channel_init
</UL>

<P><STRONG><a name="[dc]"></a>SPI_WriteReg</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, bsp_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SPI_WriteReg
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_RW
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_ClearFIFO
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_ClearStatus
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ucRF_DumpRxData
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_RxMode
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Init
</UL>

<P><STRONG><a name="[de]"></a>SPI_WriteBuf</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, bsp_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SPI_WriteBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_RW
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Init
</UL>

<P><STRONG><a name="[df]"></a>SPI_ReadReg</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, bsp_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_ReadReg
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_RW
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ucRF_GetStatus
</UL>

<P><STRONG><a name="[e0]"></a>SPI_ReadBuf</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, bsp_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SPI_ReadBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_RW
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ucRF_DumpRxData
</UL>

<P><STRONG><a name="[e1]"></a>CLK_GetHCLKFreq</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, clk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = CLK_GetHCLKFreq &rArr; SystemCoreClockUpdate &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Open
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SetBusClock
</UL>

<P><STRONG><a name="[50]"></a>CLK_SetModuleClock</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, clk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CLK_SetModuleClock
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_init
</UL>

<P><STRONG><a name="[4f]"></a>CLK_EnableModuleClock</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, clk.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_init
</UL>

<P><STRONG><a name="[d8]"></a>CLK_SysTickDelay</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, clk.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WriteByte
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SequentialRead
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadByte
</UL>

<P><STRONG><a name="[4d]"></a>CLK_InitHIRC</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, clk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CLK_InitHIRC
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_init
</UL>

<P><STRONG><a name="[d7]"></a>I2C_Open</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = I2C_Open &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
</UL>

<P><STRONG><a name="[44]"></a>PWM_ConfigOutputChannel</STRONG> (Thumb, 252 bytes, Stack size 48 bytes, pwm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = PWM_ConfigOutputChannel &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_init
</UL>

<P><STRONG><a name="[46]"></a>PWM_Start</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, pwm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = PWM_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_init
</UL>

<P><STRONG><a name="[45]"></a>PWM_EnableOutput</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, pwm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_init
</UL>

<P><STRONG><a name="[24]"></a>stackDump</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, retarget.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = stackDump &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hard_Fault_Handler
</UL>

<P><STRONG><a name="[20]"></a>Hard_Fault_Handler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, retarget.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Hard_Fault_Handler &rArr; stackDump &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stackDump
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> retarget.o(.emb_text)
</UL>
<P><STRONG><a name="[25]"></a>SendChar_ToUART</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, retarget.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar
</UL>

<P><STRONG><a name="[26]"></a>SendChar</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, retarget.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar_ToUART
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[22]"></a>fputc</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, retarget.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf5.o(i.__0printf$5)
</UL>
<P><STRONG><a name="[e2]"></a>SPI_SetBusClock</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = SPI_SetBusClock &rArr; CLK_GetHCLKFreq &rArr; SystemCoreClockUpdate &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetHCLKFreq
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Open
</UL>

<P><STRONG><a name="[db]"></a>SPI_Open</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = SPI_Open &rArr; SPI_SetBusClock &rArr; CLK_GetHCLKFreq &rArr; SystemCoreClockUpdate &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SetBusClock
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Init
</UL>

<P><STRONG><a name="[e3]"></a>TIMER_GetModuleClock</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Delay
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Open
</UL>

<P><STRONG><a name="[bc]"></a>TIMER_Open</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = TIMER_Open &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_GetModuleClock
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scheduler_init
</UL>

<P><STRONG><a name="[2b]"></a>TIMER_Delay</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = TIMER_Delay &rArr; __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_GetModuleClock
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro_offset
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accel_offset
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fbm320_init
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadByte
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi160_init
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configure_accel
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configure_gyro
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configure_fifo
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Init
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_RxMode
</UL>

<P><STRONG><a name="[d9]"></a>UART_Open</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = UART_Open &rArr; CLK_GetHCLKFreq &rArr; SystemCoreClockUpdate &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetHCLKFreq
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_console_init
</UL>

<P><STRONG><a name="[e9]"></a>set_rc_channel_reversed</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rc_channel.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_rc_channel_all
</UL>

<P><STRONG><a name="[e8]"></a>set_rc_channel_deadzone</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rc_channel.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_rc_channel_all
</UL>

<P><STRONG><a name="[e7]"></a>set_rc_channel_neutral</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rc_channel.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_rc_channel_all
</UL>

<P><STRONG><a name="[e6]"></a>set_rc_channel_min</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rc_channel.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_rc_channel_all
</UL>

<P><STRONG><a name="[e5]"></a>set_rc_channel_max</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rc_channel.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_rc_channel_all
</UL>

<P><STRONG><a name="[e4]"></a>setting_rc_channel_all</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, rc_channel.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = setting_rc_channel_all
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_rc_channel_max
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_rc_channel_min
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_rc_channel_neutral
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_rc_channel_deadzone
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_rc_channel_reversed
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rc_channel_init
</UL>

<P><STRONG><a name="[ea]"></a>set_roll_code</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, rc_channel.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = set_roll_code &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_code_matching
</UL>

<P><STRONG><a name="[eb]"></a>auto_code_matching</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, rc_channel.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = auto_code_matching &rArr; ucRF_DumpRxData &rArr; SPI_ReadBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ucRF_DumpRxData
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_roll_code
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rc_channel_init
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rc_channel_read
</UL>

<P><STRONG><a name="[57]"></a>rc_channel_init</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, rc_channel.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = rc_channel_init &rArr; SPI1_Init &rArr; TIMER_Delay &rArr; __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Init
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_RxMode
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Init
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_code_matching
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setting_rc_channel_all
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peripheral_init
</UL>

<P><STRONG><a name="[c4]"></a>rc_channel_read</STRONG> (Thumb, 242 bytes, Stack size 16 bytes, rc_channel.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = rc_channel_read &rArr; auto_code_matching &rArr; ucRF_DumpRxData &rArr; SPI_ReadBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_radio_lost
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_milli
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ucRF_DumpRxData
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_code_matching
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sched_50Hzloop
</UL>

<P><STRONG><a name="[c2]"></a>switch_handle</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, rc_channel.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = switch_handle &rArr; switch_event_trigger &rArr; set_flight_mode &rArr; althold_init &rArr; set_speed_z &rArr; calc_leash_length_z &rArr; calc_leash_length &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_event_trigger
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sched_20Hzloop
</UL>

<P><STRONG><a name="[b0]"></a>norm_input_dz</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, rc_channel.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = norm_input_dz &rArr; __aeabi_i2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constrain_float
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poscontrol_init_takeoff
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_desired_throttle_expo
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_desired_climb_rate
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channel_input_to_target
</UL>

<P><STRONG><a name="[f4]"></a>channel_input_to_target</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rc_channel.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = channel_input_to_target &rArr; norm_input_dz &rArr; __aeabi_i2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;norm_input_dz
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_desired_leans_angles
</UL>

<P><STRONG><a name="[9d]"></a>get_desired_leans_angles</STRONG> (Thumb, 364 bytes, Stack size 32 bytes, rc_channel.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = get_desired_leans_angles &rArr; tanf &rArr; __mathlib_rredf2 &rArr; __aeabi_frsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_rsqrt
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atanf
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channel_input_to_target
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tanf
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosf
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stabilize_run
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;althold_run
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acro_run
</UL>

<P><STRONG><a name="[9c]"></a>get_desired_throttle_expo</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, rc_channel.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = get_desired_throttle_expo &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constrain_float
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;norm_input_dz
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stabilize_run
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acro_run
</UL>

<P><STRONG><a name="[a2]"></a>get_desired_climb_rate</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, rc_channel.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = get_desired_climb_rate &rArr; norm_input_dz &rArr; __aeabi_i2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constrain_float
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;norm_input_dz
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;althold_run
</UL>

<P><STRONG><a name="[bf]"></a>check_motor_armed</STRONG> (Thumb, 274 bytes, Stack size 24 bytes, rc_channel.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = check_motor_armed
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_land_complete
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sched_10Hzloop
</UL>

<P><STRONG><a name="[8b]"></a>check_throttle_is_safe</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, rc_channel.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stabilize_init
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;althold_init
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acro_init
</UL>

<P><STRONG><a name="[ee]"></a>RF_RxMode</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, rf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = RF_RxMode &rArr; TIMER_Delay &rArr; __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Delay
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rc_channel_init
</UL>

<P><STRONG><a name="[f6]"></a>ucRF_GetStatus</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, rf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ucRF_GetStatus &rArr; SPI_ReadReg
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ucRF_DumpRxData
</UL>

<P><STRONG><a name="[f7]"></a>RF_ClearStatus</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, rf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RF_ClearStatus &rArr; SPI_WriteReg
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ucRF_DumpRxData
</UL>

<P><STRONG><a name="[f8]"></a>RF_ClearFIFO</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RF_ClearFIFO &rArr; SPI_WriteReg
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ucRF_DumpRxData
</UL>

<P><STRONG><a name="[ec]"></a>ucRF_DumpRxData</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, rf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ucRF_DumpRxData &rArr; SPI_ReadBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_ReadBuf
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WriteReg
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_ClearFIFO
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_ClearStatus
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ucRF_GetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rc_channel_read
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_code_matching
</UL>

<P><STRONG><a name="[ed]"></a>RF_Init</STRONG> (Thumb, 202 bytes, Stack size 40 bytes, rf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = RF_Init &rArr; SPI_WriteBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WriteBuf
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rc_channel_init
</UL>

<P><STRONG><a name="[125]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[32]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_micro
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_ConfigOutputChannel
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Delay
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_fifo
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Open
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Open
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Open
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sched_50Hzloop
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SetBusClock
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>

<P><STRONG><a name="[126]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, idiv.o(.text), UNUSED)

<P><STRONG><a name="[33]"></a>__aeabi_idivmod</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, idiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accel_offset
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_fifo
</UL>

<P><STRONG><a name="[f9]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[127]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[128]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[f0]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rc_channel_read
</UL>

<P><STRONG><a name="[129]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[12a]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[fa]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[41]"></a>__aeabi_fadd</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_logic
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_alt_target_from_climb_rate_ff
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poscontrol_init_takeoff
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_desired_throttle_expo
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_desired_leans_angles
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_desired_climb_rate
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_takeoff_climb_rate
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;takeoff_get_climb_rates
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_simple_mode
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;axis_target_pid_cal
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion_RungeKutta
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion_Normalize
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion_ToMatrix
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion_vectorGravity
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_i_output
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_pid_input
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_filt_alpha
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPF_1st
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPF2pApply
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPF2pSetCutoffFreq
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Moving_Average
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fbm320_timer_procedure
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;position_z_update
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inertial_filter_predict
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inertial_filter_correct
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHRS_GetQ
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sched_50Hzloop
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_leash_length
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pos_to_rate_z
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rate_to_accel_z
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accel_to_throttle
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atanf
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2f
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asinf
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_event_trigger
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan2
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tanf
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sinf
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosf
</UL>

<P><STRONG><a name="[3e]"></a>__aeabi_fsub</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_logic
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_speed_z
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_alt_target_from_climb_rate_ff
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poscontrol_init_takeoff
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_desired_climb_rate
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;takeoff_get_climb_rates
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_simple_mode
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attitude_angle_euler_controller
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attitude_angle_rate_controller
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion_RungeKutta
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion_ToMatrix
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion_vectorGravity
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_pid_input
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPF_1st
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPF2pApply
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPF2pSetCutoffFreq
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Moving_Average
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fbm320_timer_procedure
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;position_z_update
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHRS_GetQ
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_home_pos
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sched_50Hzloop
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pos_to_rate_z
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt_controller
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rate_to_accel_z
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accel_to_throttle
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atanf
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2f
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_event_trigger
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tanf
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sinf
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosf
</UL>

<P><STRONG><a name="[63]"></a>__aeabi_frsub</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = __aeabi_frsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_speed_z
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_alt_target_from_climb_rate_ff
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_accel_z
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;relax_alt_controller
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion_vectorGravity
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_rsqrt
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPF2pApply
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPF2pSetCutoffFreq
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;position_z_update
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt_controller
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2f
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asinf
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tanf
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sinf
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosf
</UL>

<P><STRONG><a name="[40]"></a>__aeabi_fmul</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, fmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_alt_target_from_climb_rate_ff
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;relax_alt_controller
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poscontrol_init_takeoff
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_inav_velocity
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_desired_leans_angles
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_desired_climb_rate
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_takeoff_climb_rate
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;takeoff_get_climb_rates
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_simple_mode
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_throttle_boosted
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attitude_angle_euler_controller
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion_RungeKutta
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion_Normalize
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion_ToMatrix
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion_vectorGravity
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_i_output
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_pid_input
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_filt_alpha
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_pd_output
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rad
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_rsqrt
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPF_1st
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPF2pApply
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPF2pSetCutoffFreq
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_update
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fbm320_timer_procedure
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Delay
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;position_z_update
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inertial_filter_predict
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inertial_filter_correct
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHRS_GetQ
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inertial_sensor_read
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sched_50Hzloop
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;norm_input_dz
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_inav_alt
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_inav_accel
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_leash_length
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt_controller
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rate_to_accel_z
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accel_to_throttle
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atanf
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2f
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asinf
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;channel_input_to_target
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_event_trigger
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tanf
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sinf
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosf
</UL>

<P><STRONG><a name="[3c]"></a>__aeabi_fdiv</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, fdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_alt_target_from_climb_rate_ff
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_desired_climb_rate
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stabilize_run
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;althold_run
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;takeoff_get_climb_rates
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_throttle_boosted
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_pid_input
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_filt_alpha
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Degree
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPF2pSetCutoffFreq
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Moving_Average
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fbm320_timer_procedure
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;position_z_update
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro_caloffest
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHRS_GetQ
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;norm_input_dz
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_leash_length
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt_controller
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rate_to_accel_z
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accel_to_throttle
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atanf
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2f
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tanf
</UL>

<P><STRONG><a name="[62]"></a>__ARM_scalbnf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fscalb.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_alt_target_from_climb_rate_ff
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poscontrol_init_takeoff
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_desired_throttle_expo
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_desired_climb_rate
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_throttle_boosted
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion_ToMatrix
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion_vectorGravity
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_rsqrt
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPF2pSetCutoffFreq
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHRS_GetQ
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sched_50Hzloop
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_leash_length
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt_controller
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asinf
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
</UL>

<P><STRONG><a name="[12b]"></a>scalbnf</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fscalb.o(.text), UNUSED)

<P><STRONG><a name="[d4]"></a>__aeabi_dadd</STRONG> (Thumb, 328 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_desired_throttle_expo
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;position_z_update
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inertial_filter_predict
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
</UL>

<P><STRONG><a name="[d6]"></a>__aeabi_dsub</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;position_z_update
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[101]"></a>__aeabi_drsub</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[6d]"></a>__aeabi_dmul</STRONG> (Thumb, 202 bytes, Stack size 72 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_desired_throttle_expo
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_throttle_boosted
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Degree
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
</UL>

<P><STRONG><a name="[6a]"></a>__aeabi_ddiv</STRONG> (Thumb, 234 bytes, Stack size 40 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rad
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Delay
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inertial_filter_correct
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
</UL>

<P><STRONG><a name="[d3]"></a>__ARM_scalbn</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, dscalb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inertial_filter_predict
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[12c]"></a>scalbn</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, dscalb.o(.text), UNUSED)

<P><STRONG><a name="[3b]"></a>__aeabi_i2f</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, fflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_i2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_pid_filt_hz
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro_offset
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Moving_Average
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fbm320_timer_procedure
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;position_z_update
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inertial_sensor_read
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sched_50Hzloop
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;norm_input_dz
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
</UL>

<P><STRONG><a name="[4a]"></a>__aeabi_ui2f</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ffltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_ui2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stabilize_run
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;althold_run
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;takeoff_get_climb_rates
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_update
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Moving_Average
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Delay
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;position_z_update
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro_caloffest
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AHRS_GetQ
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rate_to_accel_z
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
</UL>

<P><STRONG><a name="[c6]"></a>__aeabi_f2iz</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, ffixi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro_caloffest
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sched_50Hzloop
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_event_trigger
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tanf
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sinf
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosf
</UL>

<P><STRONG><a name="[4b]"></a>__aeabi_f2uiz</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ffixui.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_update
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Delay
</UL>

<P><STRONG><a name="[3f]"></a>__aeabi_f2d</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_alt_target_from_climb_rate_ff
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_desired_throttle_expo
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_throttle_boosted
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_pid_filt_hz
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Degree
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rad
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fbm320_timer_procedure
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Delay
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;position_z_update
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inertial_filter_predict
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inertial_filter_correct
</UL>

<P><STRONG><a name="[12d]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cdcmple.o(.text), UNUSED)

<P><STRONG><a name="[ba]"></a>__aeabi_cdcmple</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_alt_target_from_climb_rate_ff
</UL>

<P><STRONG><a name="[6b]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_alt_target_from_climb_rate_ff
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_desired_throttle_expo
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_throttle_boosted
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Degree
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rad
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Delay
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;position_z_update
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inertial_filter_predict
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inertial_filter_correct
</UL>

<P><STRONG><a name="[12e]"></a>__aeabi_cfcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cfcmple.o(.text), UNUSED)

<P><STRONG><a name="[67]"></a>__aeabi_cfcmple</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cfcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_alt_target_from_climb_rate_ff
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_desired_leans_angles
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_desired_climb_rate
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;takeoff_get_climb_rates
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constrain_float
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Moving_Average
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pos_to_rate_z
</UL>

<P><STRONG><a name="[66]"></a>__aeabi_cfrcmple</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cfrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_alt_target_from_climb_rate_ff
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_desired_climb_rate
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;takeoff_get_climb_rates
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_i_output
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constrain_float
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Moving_Average
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_leash_length
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pos_to_rate_z
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt_controller
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accel_to_throttle
</UL>

<P><STRONG><a name="[102]"></a>__aeabi_uldivmod</STRONG> (Thumb, 96 bytes, Stack size 48 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[fd]"></a>__aeabi_llsl</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, llshl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[12f]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[fe]"></a>__aeabi_lasr</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, llsshr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_lasr
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[130]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[131]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[fc]"></a>_float_round</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsqrt
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frnd
</UL>

<P><STRONG><a name="[fb]"></a>_float_epilogue</STRONG> (Thumb, 114 bytes, Stack size 12 bytes, fepilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[104]"></a>_fsqrt</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, fsqrt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _fsqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrtf
</UL>

<P><STRONG><a name="[105]"></a>_frnd</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, frnd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _frnd
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tanf
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sinf
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosf
</UL>

<P><STRONG><a name="[100]"></a>_double_round</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
</UL>

<P><STRONG><a name="[ff]"></a>_double_epilogue</STRONG> (Thumb, 164 bytes, Stack size 48 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_clz
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
</UL>

<P><STRONG><a name="[107]"></a>_dsqrt</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, dsqrt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>

<P><STRONG><a name="[11e]"></a>__ARM_dcmp4</STRONG> (Thumb, 88 bytes, Stack size 12 bytes, dcmp4.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __ARM_dcmp4
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmax
</UL>

<P><STRONG><a name="[132]"></a>_dcmp4</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, dcmp4.o(.text), UNUSED)

<P><STRONG><a name="[28]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[133]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[103]"></a>__aeabi_llsr</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, llushr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[134]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[109]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[10a]"></a>__aeabi_ui2d</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[10b]"></a>__aeabi_d2iz</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, dfixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_d2iz &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[dd]"></a>SPI_RW</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, bsp_spi.o(i.SPI_RW))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_ReadBuf
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_ReadReg
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WriteBuf
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WriteReg
</UL>

<P><STRONG><a name="[10c]"></a>__0printf$5</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, printf5.o(i.__0printf$5), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[135]"></a>__1printf$5</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf5.o(i.__0printf$5), UNUSED)

<P><STRONG><a name="[47]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf5.o(i.__0printf$5))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scheduler_init
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rc_channel_init
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;peripheral_init
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_init
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WriteByte
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadByte
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sched_50Hzloop
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_roll_code
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_event_trigger
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stackDump
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hard_Fault_Handler
</UL>

<P><STRONG><a name="[106]"></a>__ARM_clz</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, depilogue.o(i.__ARM_clz))
<BR><BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[10f]"></a>__ARM_common_ll_muluu</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, rred.o(i.__ARM_common_ll_muluu))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __ARM_common_ll_muluu
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[96]"></a>__ARM_common_switch8</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, flight_mode_control.o(i.__ARM_common_switch8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_flight_mode
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_flight_mode
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_event_trigger
</UL>

<P><STRONG><a name="[113]"></a>__ARM_fpclassify</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
</UL>

<P><STRONG><a name="[11c]"></a>__ARM_fpclassifyf</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, fpclassifyf.o(i.__ARM_fpclassifyf))
<BR><BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atanf
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2f
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asinf
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tanf
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sinf
</UL>

<P><STRONG><a name="[d1]"></a>__ARM_isfinitef</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, inertial_nav.o(i.__ARM_isfinitef))
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inertial_filter_predict
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inertial_filter_correct
</UL>

<P><STRONG><a name="[10e]"></a>__ieee754_rem_pio2</STRONG> (Thumb, 838 bytes, Stack size 120 bytes, rred.o(i.__ieee754_rem_pio2))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = __ieee754_rem_pio2 &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_ll_muluu
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
</UL>

<P><STRONG><a name="[110]"></a>__kernel_cos</STRONG> (Thumb, 224 bytes, Stack size 56 bytes, cos_i.o(i.__kernel_cos))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = __kernel_cos &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
</UL>

<P><STRONG><a name="[111]"></a>__kernel_poly</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, poly.o(i.__kernel_poly))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[112]"></a>__kernel_sin</STRONG> (Thumb, 222 bytes, Stack size 64 bytes, sin_i.o(i.__kernel_sin))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = __kernel_sin &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
</UL>

<P><STRONG><a name="[115]"></a>__mathlib_dbl_infnan</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_infnan))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __mathlib_dbl_infnan &rArr; __ARM_scalbn
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
</UL>

<P><STRONG><a name="[116]"></a>__mathlib_dbl_invalid</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_invalid))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __mathlib_dbl_invalid &rArr; __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
</UL>

<P><STRONG><a name="[114]"></a>__mathlib_dbl_underflow</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_underflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __mathlib_dbl_underflow &rArr; __ARM_scalbn
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
</UL>

<P><STRONG><a name="[117]"></a>__mathlib_flt_infnan</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, funder.o(i.__mathlib_flt_infnan))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __mathlib_flt_infnan
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atanf
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asinf
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tanf
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sinf
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosf
</UL>

<P><STRONG><a name="[118]"></a>__mathlib_flt_infnan2</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, funder.o(i.__mathlib_flt_infnan2))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = __mathlib_flt_infnan2 &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2f
</UL>

<P><STRONG><a name="[119]"></a>__mathlib_flt_invalid</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, funder.o(i.__mathlib_flt_invalid))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __mathlib_flt_invalid &rArr; __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asinf
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tanf
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sinf
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosf
</UL>

<P><STRONG><a name="[11a]"></a>__mathlib_flt_underflow</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, funder.o(i.__mathlib_flt_underflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __mathlib_flt_underflow
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atanf
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2f
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asinf
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tanf
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sinf
</UL>

<P><STRONG><a name="[11b]"></a>__mathlib_rredf2</STRONG> (Thumb, 366 bytes, Stack size 48 bytes, rredf.o(i.__mathlib_rredf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = __mathlib_rredf2 &rArr; __aeabi_frsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_ll_muluu
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tanf
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sinf
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosf
</UL>

<P><STRONG><a name="[136]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[137]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[138]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[11d]"></a>__set_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__set_errno))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asinf
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tanf
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrtf
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sinf
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cosf
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
</UL>

<P><STRONG><a name="[77]"></a>asinf</STRONG> (Thumb, 242 bytes, Stack size 24 bytes, asinf.o(i.asinf))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = asinf &rArr; __aeabi_frsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrtf
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion_ToAngE
</UL>

<P><STRONG><a name="[78]"></a>atan2f</STRONG> (Thumb, 526 bytes, Stack size 48 bytes, atan2f.o(i.atan2f))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = atan2f &rArr; __mathlib_flt_infnan2 &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan2
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion_ToAngE
</UL>

<P><STRONG><a name="[f5]"></a>atanf</STRONG> (Thumb, 296 bytes, Stack size 24 bytes, atanf.o(i.atanf))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = atanf &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_desired_leans_angles
</UL>

<P><STRONG><a name="[84]"></a>cos</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, cos.o(i.cos))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = cos &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_throttle_boosted
</UL>

<P><STRONG><a name="[61]"></a>cosf</STRONG> (Thumb, 318 bytes, Stack size 32 bytes, cosf.o(i.cosf))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = cosf &rArr; __mathlib_rredf2 &rArr; __aeabi_frsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frnd
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_desired_leans_angles
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_simple_mode
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPF2pSetCutoffFreq
</UL>

<P><STRONG><a name="[6f]"></a>fmax</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, fmax.o(i.fmax))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = fmax &rArr; __ARM_dcmp4
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_dcmp4
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_pid_filt_hz
</UL>

<P><STRONG><a name="[99]"></a>sinf</STRONG> (Thumb, 330 bytes, Stack size 32 bytes, sinf.o(i.sinf))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = sinf &rArr; __mathlib_rredf2 &rArr; __aeabi_frsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frnd
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_simple_mode
</UL>

<P><STRONG><a name="[b9]"></a>sqrt</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, sqrt.o(i.sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = sqrt &rArr; _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_alt_target_from_climb_rate_ff
</UL>

<P><STRONG><a name="[b5]"></a>sqrtf</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, sqrtf.o(i.sqrtf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = sqrtf &rArr; _fsqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsqrt
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt_controller
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asinf
</UL>

<P><STRONG><a name="[60]"></a>tanf</STRONG> (Thumb, 312 bytes, Stack size 32 bytes, tanf.o(i.tanf))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = tanf &rArr; __mathlib_rredf2 &rArr; __aeabi_frsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frnd
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_desired_leans_angles
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPF2pSetCutoffFreq
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[1b]"></a>Default_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_pn020series.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Default_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Default_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_pn020series.o(RESET)
</UL>
<P><STRONG><a name="[d0]"></a>inertial_filter_correct</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, inertial_nav.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = inertial_filter_correct &rArr; __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_isfinitef
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;position_z_update
</UL>

<P><STRONG><a name="[d2]"></a>inertial_filter_predict</STRONG> (Thumb, 110 bytes, Stack size 40 bytes, inertial_nav.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = inertial_filter_predict &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_isfinitef
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;position_z_update
</UL>

<P><STRONG><a name="[f1]"></a>switch_event_trigger</STRONG> (Thumb, 274 bytes, Stack size 24 bytes, rc_channel.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = switch_event_trigger &rArr; set_flight_mode &rArr; althold_init &rArr; set_speed_z &rArr; calc_leash_length_z &rArr; calc_leash_length &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_flight_mode
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_pid_param_d
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_pid_param_i
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_handle
</UL>

<P><STRONG><a name="[10d]"></a>_printf_core</STRONG> (Thumb, 688 bytes, Stack size 96 bytes, printf5.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf$5
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
